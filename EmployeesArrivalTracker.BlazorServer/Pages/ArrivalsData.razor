@page "/arrivalsdata"

<PageTitle>Arrivals Data</PageTitle>

@using EmployeesArrivalTracker.BlazorServer.Data
@using EmployeesArrivalTracker.BlazorServer.Entities
@inject ArrivalService ArrivalService

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

<style>
    .sort-th
    {
        cursor: pointer;
    }

    .fa
    {
        float: inline-end;
    }
</style>

<h1>Arrivals Data</h1>

@if (arrivals == null)
{
	<p><em>Loading...</em></p>
}
else
{
    <hr />
    <h4>Filter by employee id</h4>
    <td><input type="text" placeholder="Enter employee id" @bind="searchById" /></td>
    <button class="btn-primary hidewhenprint" @onclick="showEmployeeById">
        Search
    </button>
    <hr />
    <h4>Filter by arrival datetime</h4>
    <td><input type="text" placeholder="From arrival datetime" @bind="searchByDatetimeFrom" /></td>
    <td><input type="text" placeholder="To arrival datetime" @bind="searchByDatetimeTo" /></td>
    <button class="btn-primary hidewhenprint" @onclick="showEmployeesByArrivalDatetime">
        Search
    </button>
    <hr />
    <button class="btn-primary hidewhenprint" @onclick="showAll">
        Show All
    </button>
    <hr />
	<table class="table">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("EmployeeId"))">
                    EmployeeId
                    <span class="fa @(SetSortIcon("EmployeeId")) " ></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("ArrivalDatetime"))">
                    Arrival Datetime
                    <span class="fa @(SetSortIcon("ArrivalDatetime")) " ></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in arrivals)
            {
                <tr>
                    <td>@item.EmployeeId</td>
                    <td>@item.ArrivalDatetime</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Arrival[] arrivals = new Arrival[] { };

    protected override async Task OnInitializedAsync()
    {
        arrivals = await ArrivalService.GetArrivalsAsync();
    }

    private bool isSortedAscending = false;
    private string activeSortColumn = "ArrivalDatetime";

    private void SortTable(string columnName)
    {
        if(columnName != activeSortColumn)
        {
            arrivals = arrivals.OrderBy(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if(isSortedAscending)
            {
                arrivals = arrivals.OrderByDescending(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            }
            else
            {
                arrivals = arrivals.OrderBy(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if(activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if(isSortedAscending)
        {
            return "fa-sort-up";
            //return "fa-solid fa-plane-departure";
        }
        return "fa-sort-down";
        //return "fa-solid fa-plane-arrival";
    }

    string? searchById;

    void showEmployeeById()
    {
        if (searchById == "" || searchById == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetById(int.Parse(searchById));
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

    }

    string? searchByDatetimeFrom;
    string? searchByDatetimeTo;

    void showEmployeesByArrivalDatetime()
    {
        if(searchByDatetimeFrom == "" || searchByDatetimeTo == "" || searchByDatetimeFrom == null || searchByDatetimeTo == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetByArrivalDatetime(DateTime.Parse(searchByDatetimeFrom), DateTime.Parse(searchByDatetimeTo));
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);
    }

    void showAll()
    {
        OnInitializedAsync();
        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);
    }

}
