@page "/arrivalsdata"

<PageTitle>Arrivals Data</PageTitle>

@using EmployeesArrivalTracker.BlazorServer.Data
@using EmployeesArrivalTracker.BlazorServer.Entities
@inject ArrivalService ArrivalService

<head>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css">
</head>

<style>
    .sort-th
    {
        cursor: pointer;
    }

    .fa
    {
        float: inline-end;
    }
</style>

<h1>Arrivals Data</h1>

@if (arrivals == null)
{
	<p><em>Loading...</em></p>
}
else
{
    <hr />
    <h4>Filters: </h4>
    <h6>Only the last selected filter will be applied</h6>
    <br />
    <td><input type="text" placeholder=" By employee id" @bind="filterById" />
    <button class="btn-primary hidewhenprint" @onclick="showEmployeeById">
        Filter
    </button> | 

    <input type="text" placeholder=" By age" @bind="filterByAge" />
    <button class="btn-primary hidewhenprint" @onclick="showEmployeesByAge">
        Filter
    </button> |

    <input type="text" placeholder=" By first name" @bind="filterByFirstName" />
    <button class="btn-primary hidewhenprint" @onclick="showEmployeesByFirstName">
        Filter
    </button> |

    <input type="text" placeholder=" By last name" @bind="filterByLastName" />
    <button class="btn-primary hidewhenprint" @onclick="showEmployeesByLastName">
        Filter
    </button></td>
    
    <br />

    <h6>By arrival datetime</h6>
    <td><input type="text" placeholder="From arrival datetime" @bind="filterByDatetimeFrom" />
    <input type="text" placeholder="To arrival datetime" @bind="filterByDatetimeTo" />
    <button class="btn-primary hidewhenprint" @onclick="showEmployeesByArrivalDatetime">
        Filter
    </button></td>

    <hr />
    <button class="btn-primary hidewhenprint" @onclick="showAll">
        Show All
    </button>
    <hr />
	<table class="table">
        <thead>
            <tr>
                <th class="sort-th" @onclick="@(() => SortTable("EmployeeId"))">
                    EmployeeId
                    <span class="fa @(SetSortIcon("EmployeeId")) " ></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("FirstName"))">
                    First name
                    <span class="fa @(SetSortIcon("FirstName")) " ></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("LastName"))">
                    Last name
                    <span class="fa @(SetSortIcon("LastName")) " ></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("Age"))">
                    Age
                    <span class="fa @(SetSortIcon("Age")) " ></span>
                </th>
                <th class="sort-th" @onclick="@(() => SortTable("ArrivalDatetime"))">
                    Arrival Datetime
                    <span class="fa @(SetSortIcon("ArrivalDatetime")) " ></span>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in arrivals)
            {
                <tr>
                    <td>@item.EmployeeId</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Age</td>
                    <td>@item.ArrivalDatetime</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ArrivalViewModel[] arrivals = new ArrivalViewModel[] { };

    protected override async Task OnInitializedAsync()
    {
        arrivals = await ArrivalService.GetArrivalsAsync();
    }

    private bool isSortedAscending = false;
    private string activeSortColumn = "ArrivalDatetime";

    private void SortTable(string columnName)
    {
        if(columnName != activeSortColumn)
        {
            arrivals = arrivals.OrderBy(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if(isSortedAscending)
            {
                arrivals = arrivals.OrderByDescending(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            }
            else
            {
                arrivals = arrivals.OrderBy(x => x.GetType().GetProperty(columnName)?.GetValue(x, null)).ToArray();
            }

            isSortedAscending = !isSortedAscending;
        }
    }

    private string SetSortIcon(string columnName)
    {
        if(activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if(isSortedAscending)
        {
            //return "fa-sort-up";
            return "fa-solid fa-plane-departure";
        }
        //return "fa-sort-down";
        return "fa-solid fa-plane-arrival";
    }

    string? filterById;

    void showEmployeeById()
    {
        if (filterById == "" || filterById == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetById(int.Parse(filterById));
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterByAge = null;
        filterByFirstName = null;
        filterByLastName = null;
        filterByDatetimeFrom = null;
        filterByDatetimeTo = null;

    }

    string? filterByAge;

    void showEmployeesByAge()
    {
        if (filterByAge == "" || filterByAge == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetByAge(int.Parse(filterByAge));
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterById = null;
        filterByFirstName = null;
        filterByLastName = null;
        filterByDatetimeFrom = null;
        filterByDatetimeTo = null;

    }

    string? filterByFirstName;

    void showEmployeesByFirstName()
    {
        if (filterByFirstName == "" || filterByFirstName == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetByFirstName(filterByFirstName);
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterById = null;
        filterByAge = null;
        filterByLastName = null;
        filterByDatetimeFrom = null;
        filterByDatetimeTo = null;

    }

    string? filterByLastName;

    void showEmployeesByLastName()
    {
        if (filterByLastName == "" || filterByLastName == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetByLastName(filterByLastName);
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterById = null;
        filterByAge = null;
        filterByFirstName = null;
        filterByDatetimeFrom = null;
        filterByDatetimeTo = null;

    }

    string? filterByDatetimeFrom;
    string? filterByDatetimeTo;

    void showEmployeesByArrivalDatetime()
    {
        if(filterByDatetimeFrom == "" || filterByDatetimeTo == "" || filterByDatetimeFrom == null || filterByDatetimeTo == null)
        {
            OnInitializedAsync();
        }
        else
        {
            arrivals = ArrivalService.GetByArrivalDatetime(DateTime.Parse(filterByDatetimeFrom), DateTime.Parse(filterByDatetimeTo));
        }

        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterById = null;
        filterByAge = null;
        filterByFirstName = null;
        filterByLastName = null;
    }

    void showAll()
    {
        OnInitializedAsync();
        isSortedAscending = !isSortedAscending;
        SortTable(activeSortColumn);

        filterById = null;
        filterByAge = null;
        filterByFirstName = null;
        filterByLastName = null;
        filterByDatetimeFrom = null;
        filterByDatetimeTo = null;
    }

}
